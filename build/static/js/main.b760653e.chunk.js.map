{"version":3,"sources":["components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["google","window","$","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startLat","startLong","destLat","destLong","comparePrices","bind","assertThisInitialized","initializeMap","checkPrice","maps","event","addDomListener","dest","document","getElementById","places","Autocomplete","initial","css","geocoder","Geocoder","geocode","address","value","results","status","GeocoderStatus","OK","length","geometry","location","lat","lng","alert","console","log","axios","post","startLatitude","startLongitude","endLatitude","endLongitude","then","res","catch","err","error","react_default","a","createElement","className","htmlFor","id","type","onClick","React","Component","Switch","Route","path","component","Home","Redirect","from","exact","to","Boolean","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAIMA,SAASC,OAAOD,QAChBE,EAAID,OAAOC,EAwHFC,cAjHX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAW,GACXC,UAAY,GACZC,QAAU,GACVC,SAAW,IAEfX,EAAKY,cAAgBZ,EAAKY,cAAcC,KAAnBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACrBA,EAAKe,cAAgBf,EAAKe,cAAcF,KAAnBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACrBA,EAAKgB,WAAahB,EAAKgB,WAAWH,KAAhBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAVHA,mFAcfG,KAAKY,wDAcLpB,EAAOsB,KAAKC,MAAMC,eAAevB,OAAQ,OAVzC,WACE,IAAIwB,EAAOC,SAASC,eAAe,aAChB,IAAI3B,EAAOsB,KAAKM,OAAOC,aAAaJ,KASzDzB,EAAOsB,KAAKC,MAAMC,eAAevB,OAAQ,OANzC,WACE,IAAI6B,EAAUJ,SAASC,eAAe,aACnB,IAAI3B,EAAOsB,KAAKM,OAAOC,aAAaC,0CAQzD5B,EAAE,YAAY6B,IAAI,UAAW,gBAE5B,IAAIN,EAAOC,SAASC,eAAe,aAC/BG,EAAUJ,SAASC,eAAe,aAKnCK,EAAW,IAAIhC,EAAOsB,KAAKW,SAC3BhB,EAAgBT,KAAKS,cAAcC,KAAKV,MAE5CwB,EAASE,QAAQ,CACfC,QAAWV,EAAKW,OACf,SAAUC,EAASC,GACpB,GAAIA,IAAWtC,EAAOsB,KAAKiB,eAAeC,IAAMH,EAAQI,OAAS,EAAG,CAElE,IAAI1B,EAAUsB,EAAQ,GAAGK,SAASC,SAASC,MACvC5B,EAAWqB,EAAQ,GAAGK,SAASC,SAASE,MAE5Cb,EAASE,QAAQ,CACbC,QAAWL,EAAQM,OAClB,SAAUC,EAASC,GACpB,GAAIA,IAAWtC,EAAOsB,KAAKiB,eAAeC,IAAMH,EAAQI,OAAS,EAAG,CAEhE,IAAI5B,EAAWwB,EAAQ,GAAGK,SAASC,SAASC,MACxC9B,EAAYuB,EAAQ,GAAGK,SAASC,SAASE,MAC7C5B,EAAcJ,EAAUC,EAAWC,EAASC,QAG9C8B,MAAM,sFACNC,QAAQC,IAAIV,GACZS,QAAQC,IAAIX,UAKlBS,MAAM,sFACNC,QAAQC,IAAIV,GACZS,QAAQC,IAAIX,2CAMNxB,EAAUC,EAAWC,EAASC,GACxC+B,QAAQC,IAAI,SACZC,IAAMC,KAAK,UAAW,CAClBC,cAAetC,EACfuC,eAAgBtC,EAChBuC,YAAatC,EACbuC,aAActC,IAEbuC,KAAK,SAAAC,MAGLC,MAAM,SAAAC,GAAQX,QAAQY,MAAMD,sCAOjC,OACIE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,aAAf,oBACAJ,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYE,GAAG,YAAYC,KAAK,SACjDN,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,aAAf,eACAJ,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYE,GAAG,YAAYC,KAAK,SACjDN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBE,GAAG,SAASE,QAAS3D,KAAKa,YAA9D,gBACAuC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACZH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,6BA5GtBK,IAAMC,WCQTlE,0LAVX,OACEyD,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWC,IAC/Bd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAUC,KAAK,IAAIC,OAAK,EAACC,GAAG,UAC5BlB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAUG,GAAG,uBANHT,cCOEU,QACW,cAA7B9E,OAAO0C,SAASqC,UAEe,UAA7B/E,OAAO0C,SAASqC,UAEhB/E,OAAO0C,SAASqC,SAASC,MACvB,uECTNC,IAASC,OACPvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACuB,EAAD,OAEF3D,SAASC,eAAe,SDoHpB,kBAAmB2D,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.b760653e.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport {places} from 'google-maps-react';\n\nconst google = window.google;\nconst $ = window.$;\n\n\n\nclass App extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            startLat : \"\",\n            startLong : \"\",\n            destLat : \"\",\n            destLong : \"\",\n        };\n        this.comparePrices = this.comparePrices.bind(this);\n        this.initializeMap = this.initializeMap.bind(this);\n        this.checkPrice = this.checkPrice.bind(this);\n    }\n\n    componentDidMount() {\n        this.initializeMap();\n    }\n\n    initializeMap() {\n        function autocompleteStartLocation() {\n          var dest = document.getElementById('destField');\n          var autocomplete = new google.maps.places.Autocomplete(dest);\n        }\n      \n        function autocompleteDestination() {\n          var initial = document.getElementById('initField');\n          var autocomplete = new google.maps.places.Autocomplete(initial);\n        }\n      \n        google.maps.event.addDomListener(window, 'load', autocompleteStartLocation);\n        google.maps.event.addDomListener(window, 'load', autocompleteDestination);\n    }\n\n    checkPrice() {\n        $('.spinner').css('display', 'inline-block');\n\n         var dest = document.getElementById('destField');\n         var initial = document.getElementById('initField');\n\n\n\n        // Get geocoder instance\n        var geocoder = new google.maps.Geocoder();\n        let comparePrices = this.comparePrices.bind(this);\n        // Geocode the address\n        geocoder.geocode({\n          'address': dest.value\n        }, function (results, status) {\n          if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n            //define results\n            let destLat = results[0].geometry.location.lat();\n            let destLong = results[0].geometry.location.lng();\n            //recurse with init\n            geocoder.geocode({\n                'address': initial.value\n              }, function (results, status) {\n                if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n                    //define results\n                    let startLat = results[0].geometry.location.lat();\n                    let startLong = results[0].geometry.location.lng();\n                    comparePrices(startLat, startLong, destLat, destLong);\n                    // show an error if it's not\n                } else {\n                  alert(\"Error with destination field! Please try again and make sure the address is valid!\");\n                  console.log(status);\n                  console.log(results);\n                }\n              });    \n            // show an error if it's not\n          } else {\n            alert(\"Error with destination field! Please try again and make sure the address is valid!\");\n            console.log(status);\n            console.log(results);\n          }\n        });\n\n    }\n\n    comparePrices(startLat, startLong, destLat, destLong) {\n        console.log('hello')\n        axios.post('/search', {\n            startLatitude: startLat,\n            startLongitude: startLong,\n            endLatitude: destLat,\n            endLongitude: destLong\n        })\n            .then(res => {\n                \n            })\n            .catch(err => {console.error(err)});\n    }\n\n\n    \n\n    render () {\n        return (\n            <div>\n                <div className=\"searchpage\">\n                    <label htmlFor=\"initField\">Initial Location</label>\n                    <input className=\"searchBar\" id=\"initField\" type=\"text\"/>\n                    <label htmlFor=\"destField\">Destination</label>\n                    <input className=\"searchBar\" id=\"destField\" type=\"text\"/>\n                    <button className=\"btn btn-default\" id=\"search\" onClick={this.checkPrice}>Check Route!</button>\n                    <span className=\"spinner\">\n                        <span className=\"double-bounce1\"></span>\n                        <span className=\"double-bounce2\"></span>\n                    </span>\n                </div>\n            </div>\n        )\n    }   \n}\n\nexport default App;","import React, { Component } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport Home from \"./components/home\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/home\" component={Home} />\n        <Redirect from=\"/\" exact to=\"/home\" />\n        <Redirect to=\"/not-found\" />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}