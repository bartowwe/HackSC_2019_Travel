{"map":"{\"version\":3,\"sources\":[\"/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/src/App.js\",\"/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/src/serviceWorker.js\",\"/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/src/index.js\"],\"names\":[\"App\",\"react_default\",\"a\",\"createElement\",\"Switch\",\"Route\",\"path\",\"component\",\"Home\",\"Redirect\",\"from\",\"exact\",\"to\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"BrowserRouter\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"g2GAiBeA,0LAVX,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWC,EAAAA,IAC/BP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAUC,KAAK,IAAIC,OAAK,EAACC,GAAG,UAC5BX,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAUG,GAAG,uBANHC,EAAAA,YCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECTNC,EAAAA,EAASC,OACPnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACmB,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from \\\"react\\\";\\nimport { Route, Redirect, Switch } from \\\"react-router-dom\\\";\\nimport Home from \\\"./components/home\\\";\\nimport \\\"./App.css\\\";\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <Switch>\\n        <Route path=\\\"/home\\\" component={Home} />\\n        <Redirect from=\\\"/\\\" exact to=\\\"/home\\\" />\\n        <Redirect to=\\\"/not-found\\\" />\\n      </Switch>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { BrowserRouter } from \\\"react-router-dom\\\";\\nimport \\\"./index.css\\\";\\nimport App from \\\"./App\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\nimport \\\"bootstrap/dist/css/bootstrap.min.css\\\";\\nimport \\\"font-awesome/css/font-awesome.css\\\";\\n\\nReactDOM.render(\\n  <BrowserRouter>\\n    <App />\\n  </BrowserRouter>,\\n  document.getElementById(\\\"root\\\")\\n);\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{13:function(e,s){throw new Error('Module build failed (from ./node_modules/babel-loader/lib/index.js):\\nSyntaxError: /Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/src/components/home.jsx: Unexpected token (7:25)\\n\\n\\x1b[0m \\x1b[90m  5 | \\x1b[39m\\x1b[36mconst\\x1b[39m google \\x1b[33m=\\x1b[39m window\\x1b[33m.\\x1b[39mgoogle\\x1b[33m;\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m  6 | \\x1b[39m\\x1b[36mconst\\x1b[39m $ \\x1b[33m=\\x1b[39m window\\x1b[33m.\\x1b[39m$\\x1b[33m;\\x1b[39m\\x1b[0m\\n\\x1b[0m\\x1b[31m\\x1b[1m>\\x1b[22m\\x1b[39m\\x1b[90m  7 | \\x1b[39m\\x1b[36mconst\\x1b[39m destField \\x1b[33m=\\x1b[39m window\\x1b[33m.\\x1b[39m\\x1b[32m\"destField\"\\x1b[39m\\x1b[33m;\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m    | \\x1b[39m                         \\x1b[31m\\x1b[1m^\\x1b[22m\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m  8 | \\x1b[39m\\x1b[36mconst\\x1b[39m initField \\x1b[33m=\\x1b[39m window\\x1b[33m.\\x1b[39m\\x1b[32m\"initField\"\\x1b[39m\\x1b[33m;\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m  9 | \\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 10 | \\x1b[39m\\x1b[0m\\n    at _class.raise (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:4051:15)\\n    at _class.unexpected (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:5382:16)\\n    at _class.parseIdentifierName (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:7260:18)\\n    at _class.parseIdentifier (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:7234:21)\\n    at _class.parseMaybePrivateName (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:6572:19)\\n    at _class.parseSubscript (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:6175:30)\\n    at _class.parseSubscript (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:2942:51)\\n    at _class.parseSubscripts (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:6124:19)\\n    at _class.parseSubscripts (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:2895:52)\\n    at _class.parseExprSubscripts (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:6114:17)\\n    at _class.parseMaybeUnary (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:6083:21)\\n    at _class.parseExprOps (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:5968:21)\\n    at _class.parseMaybeConditional (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:5940:21)\\n    at _class.parseMaybeAssign (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:5887:21)\\n    at _class.parseMaybeAssign (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:2811:53)\\n    at _class.parseVar (/Users/18AkhilA/Documents/GitHub/HackSC_2019_Travel/node_modules/@babel/parser/lib/index.js:8150:26)')},17:function(e,s,a){e.exports=a(34)},23:function(e,s,a){},25:function(e,s,a){},34:function(e,s,a){\"use strict\";a.r(s);var n=a(1),r=a.n(n),l=a(9),t=a.n(l),m=a(36),i=(a(23),a(10)),o=a(11),c=a(14),b=a(12),d=a(15),u=a(37),_=a(38),p=a(35),k=a(13),A=a.n(k),H=(a(25),function(e){function s(){return Object(i.a)(this,s),Object(c.a)(this,Object(b.a)(s).apply(this,arguments))}return Object(d.a)(s,e),Object(o.a)(s,[{key:\"render\",value:function(){return r.a.createElement(u.a,null,r.a.createElement(_.a,{path:\"/home\",component:A.a}),r.a.createElement(p.a,{from:\"/\",exact:!0,to:\"/home\"}),r.a.createElement(p.a,{to:\"/not-found\"}))}}]),s}(n.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a(30),a(32);t.a.render(r.a.createElement(m.a,null,r.a.createElement(H,null)),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[17,2,1]]]);","extractedComments":[]}