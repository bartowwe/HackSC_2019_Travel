{"ast":null,"code":"import _classCallCheck from \"/Users/bartowweiss/Documents/GitHub/HackSC_2019_Travel_BRANCH/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bartowweiss/Documents/GitHub/HackSC_2019_Travel_BRANCH/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bartowweiss/Documents/GitHub/HackSC_2019_Travel_BRANCH/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bartowweiss/Documents/GitHub/HackSC_2019_Travel_BRANCH/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bartowweiss/Documents/GitHub/HackSC_2019_Travel_BRANCH/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/bartowweiss/Documents/GitHub/HackSC_2019_Travel_BRANCH/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/bartowweiss/Documents/GitHub/HackSC_2019_Travel_BRANCH/src/components/home.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport { places, GeoCoder, Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { Redirect, Switch, Link, Route, BrowserRouter as Router } from 'react-router-dom';\nvar google = window.google;\nvar $ = window.$;\nvar geocoder = new google.maps.Geocoder();\nvar directionsService = new google.maps.DirectionsService();\nvar directionsDisplay = new google.maps.DirectionsRenderer();\nvar dest;\nvar initial;\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      startLat: \"\",\n      startLong: \"\",\n      destLat: \"\",\n      destLong: \"\"\n    };\n    _this.initializeMap = _this.initializeMap.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.calculateAndDisplayRoute = _this.calculateAndDisplayRoute.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initializeMap();\n    }\n  }, {\n    key: \"initializeMap\",\n    value: function initializeMap() {\n      function autocompleteStartLocation() {\n        dest = document.getElementById('destField');\n        var autocomplete = new google.maps.places.Autocomplete(dest);\n      }\n\n      function autocompleteDestination() {\n        initial = document.getElementById('initField');\n        var autocomplete = new google.maps.places.Autocomplete(initial);\n      }\n\n      google.maps.event.addDomListener(window, 'load', autocompleteStartLocation);\n      google.maps.event.addDomListener(window, 'load', autocompleteDestination); //for directions\n\n      var mapOptions = {\n        zoom: 7,\n        center: chicago\n      };\n      var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n      directionsDisplay.setMap(map);\n    }\n  }, {\n    key: \"calculateAndDisplayRoute\",\n    value: function calculateAndDisplayRoute(directionsService, directionsDisplay) {\n      //geocode\n      // Geocode the address\n      geocoder.geocode({\n        'address': dest.value\n      }, function (results, status) {\n        if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n          //define results\n          var destLat = results[0].geometry.location.lat();\n          var destLong = results[0].geometry.location.lng(); //recurse with init\n\n          geocoder.geocode({\n            'address': initial.value\n          }, function (results, status) {\n            if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n              //define results\n              var startLat = results[0].geometry.location.lat();\n              var startLong = results[0].geometry.location.lng();\n              console.log(startLat, startLong, destLat, destLong); //here is where we could use the lat/long to get a route\n\n              directionsService.route({\n                origin: {\n                  lat: startLat,\n                  lng: startLong\n                },\n                destination: {\n                  lat: destLat,\n                  lng: destLong\n                },\n                travelMode: 'DRIVING'\n              }, function (response, status) {\n                if (status === 'OK') {\n                  console.log('directions okay', response);\n                  directionsDisplay.setDirections(response);\n                  directionsDisplay.setMap(document.getElementById('map'));\n                } else {\n                  window.alert('Directions request failed due to ' + status);\n                }\n              }); // show an error if it's not\n            } else {\n              alert(\"Error with destination field! Please try again and make sure the address is valid!\");\n              console.log(status);\n              console.log(results);\n            }\n          }); // show an error if it's not\n        } else {\n          alert(\"Error with destination field! Please try again and make sure the address is valid!\");\n          console.log(status);\n          console.log(results);\n        }\n      }); //end geocode\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"searchpage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"initField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Initial Location\"), React.createElement(\"input\", {\n        className: \"searchBar\",\n        id: \"initField\",\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"destField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Destination\"), React.createElement(\"input\", {\n        className: \"searchBar\",\n        id: \"destField\",\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-default\",\n        id: \"search\",\n        onClick: function onClick() {\n          _this2.calculateAndDisplayRoute(directionsService, directionsDisplay);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Check Route!\"), React.createElement(\"span\", {\n        className: \"spinner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"double-bounce1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"double-bounce2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }))), React.createElement(Map, {\n        centerAroundCurrentLocation: true,\n        className: \"map\",\n        google: google,\n        style: {\n          height: '100%',\n          position: 'relative',\n          width: '100%'\n        },\n        zoom: 14,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/bartowweiss/Documents/GitHub/HackSC_2019_Travel_BRANCH/src/components/home.jsx"],"names":["React","axios","places","GeoCoder","Map","InfoWindow","Marker","GoogleApiWrapper","Redirect","Switch","Link","Route","BrowserRouter","Router","google","window","$","geocoder","maps","Geocoder","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","dest","initial","App","props","state","startLat","startLong","destLat","destLong","initializeMap","bind","calculateAndDisplayRoute","autocompleteStartLocation","document","getElementById","autocomplete","Autocomplete","autocompleteDestination","event","addDomListener","mapOptions","zoom","center","chicago","map","setMap","geocode","value","results","status","GeocoderStatus","OK","length","geometry","location","lat","lng","console","log","route","origin","destination","travelMode","response","setDirections","alert","height","position","width","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { places, GeoCoder, Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport {\n  Redirect,\n  Switch,\n  Link,\n  Route,\n  BrowserRouter as Router\n} from 'react-router-dom';\n\n\n\nconst google = window.google;\nconst $ = window.$;\nlet geocoder = new google.maps.Geocoder();\nvar directionsService = new google.maps.DirectionsService;\nvar directionsDisplay = new google.maps.DirectionsRenderer;\n\nvar dest;\nvar initial;\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      startLat: \"\",\n      startLong: \"\",\n      destLat: \"\",\n      destLong: \"\",\n    };\n    this.initializeMap = this.initializeMap.bind(this);\n    this.calculateAndDisplayRoute = this.calculateAndDisplayRoute.bind(this);\n  }\n\n  componentDidMount() {\n    this.initializeMap();\n  }\n\n  initializeMap() {\n    function autocompleteStartLocation() {\n       dest = document.getElementById('destField');\n      var autocomplete = new google.maps.places.Autocomplete(dest);\n    }\n\n    function autocompleteDestination() {\n       initial = document.getElementById('initField');\n      var autocomplete = new google.maps.places.Autocomplete(initial);\n    }\n\n    google.maps.event.addDomListener(window, 'load', autocompleteStartLocation);\n    google.maps.event.addDomListener(window, 'load', autocompleteDestination);\n\n    //for directions\n    var mapOptions = {\n      zoom:7,\n      center: chicago\n    }\n    var map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    directionsDisplay.setMap(map);\n  }\n\n  calculateAndDisplayRoute(directionsService, directionsDisplay) {\n    //geocode\n        // Geocode the address\n        geocoder.geocode({\n          'address': dest.value\n        }, function (results, status) {\n          if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n            //define results\n            let destLat = results[0].geometry.location.lat();\n            let destLong = results[0].geometry.location.lng();\n            //recurse with init\n            geocoder.geocode({\n              'address': initial.value\n            }, function (results, status) {\n              if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n                //define results\n                let startLat = results[0].geometry.location.lat();\n                let startLong = results[0].geometry.location.lng();\n\n                console.log(startLat, startLong, destLat, destLong);\n\n                //here is where we could use the lat/long to get a route\n                directionsService.route({\n                  origin: {lat: startLat, lng: startLong},\n                  destination: {lat: destLat, lng: destLong},\n                  travelMode: 'DRIVING'\n                }, function(response, status) {\n                  if (status === 'OK') {\n                    console.log('directions okay', response);\n                    directionsDisplay.setDirections(response);\n                    directionsDisplay.setMap(document.getElementById('map'));\n\n                  } else {\n                    window.alert('Directions request failed due to ' + status);\n                  }\n                });\n\n\n                // show an error if it's not\n              } else {\n                alert(\"Error with destination field! Please try again and make sure the address is valid!\");\n                console.log(status);\n                console.log(results);\n              }\n            });\n            // show an error if it's not\n          } else {\n            alert(\"Error with destination field! Please try again and make sure the address is valid!\");\n            console.log(status);\n            console.log(results);\n          }\n        });\n    //end geocode\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"searchpage\">\n          <label htmlFor=\"initField\">Initial Location</label>\n          <input className=\"searchBar\" id=\"initField\" type=\"text\" />\n          <label htmlFor=\"destField\">Destination</label>\n          <input className=\"searchBar\" id=\"destField\" type=\"text\" />\n          <button className=\"btn btn-default\" id=\"search\" onClick={() => {this.calculateAndDisplayRoute(directionsService,directionsDisplay)}}>Check Route!</button>\n          <span className=\"spinner\">\n            <span className=\"double-bounce1\"></span>\n            <span className=\"double-bounce2\"></span>\n          </span>\n        </div>\n        \n        <Map\n          centerAroundCurrentLocation\n          className=\"map\"\n          google={google}\n          style={{ height: '100%', position: 'relative', width: '100%' }}\n          zoom={14}\n        />\n      </div>\n\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}